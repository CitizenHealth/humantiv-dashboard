{"version":3,"sources":["resources/images/logo.png","resources/colors.js","resources/images.js","components/atoms/HVStatCard.js","components/molecules/HVMenuBar.js","components/atoms/HVBarChart.js","business/network/humantiv.js","business/network/api.js","business/utils/adapters.js","components/templates/HVBoard.js","business/utils/formatters.js","business/hooks/data.js","screens/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SharedColors","require","yellow","darkYellow","red","darkRed","blue30","blue","darkBlue","green","darkGreen","purple","darkPurple","white","black","grey","background","useStyles","makeStyles","card","width","height","justifyContent","alignItems","borderRadius","title","fontSize","titleComingSoon","subtitle","pos","marginBottom","HVStatCard","loading","isComingSoon","children","classes","Card","className","CardContent","Grid","container","spacing","direction","justify","Skeleton","variant","Typography","color","gutterBottom","defaultProps","PropTypes","string","theme","root","flexGrow","backgroundColor","settingsIcon","marginRight","marginLeft","image","deepOrange","HVMenu","useState","item","component","Avatar","Settings","textAlign","borderBottomColor","borderBottomWidth","renderLabel","x","y","value","fill","textAnchor","fontFamily","HVBarchart","data","style","borderColor","layout","margin","right","bottom","hide","type","tickLine","axisLine","dataKey","tick","label","barGap","barSize","legendType","maxBarSize","map","entry","index","key","axios","defaults","headers","post","create","baseURL","getTotalUsers","a","humantiv","get","response","getTotalMedit","getDeviceStats","getJourneyStats","_setColor","journey","devicesAdapter","Object","keys","device","name","journeyAdapter","flex","content","marginTop","totalUserIcon","padding","averageSleepIcon","totalMeditIcon","totalActivityIcon","totalStepsIcon","HVBoard","amount","count","users","setUsers","medit","setMedit","devices","setDevices","journeys","setJourneys","setLoading","useEffect","fetchData","dUsers","dMedit","dDevices","dJourneys","useFetch","HVMenuBar","numeral","format","Group","AccountBalance","Hotel","DirectionsRun","styles","Dashboard","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8169559f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.da3e88f7.png\";","\nconst SharedColors = {\n\tyellow: 'rgba(232,176,0,0.30)',\n\tdarkYellow: '#EAB100',\n\tred: 'rgba(241,91,88,0.30)',\n\tdarkRed: '#F45A54',\n\tblue30: 'rgba(53,152,254,0.30)',\n\tblue: 'rgba(53,152,254,1.0)',\n\tdarkBlue: '#2D96FF',\n\tgreen: 'rgba(54,211,145,0.30)',\n\tdarkGreen: \"#28D58F\",\n\tpurple: 'rgba(31,68,185,0.30)',\n\tdarkPurple: \"#1B3FBC\",\n\twhite: '#ffffff',\n\tblack: '#000000',\n\tgrey: '#707070',\n\tbackground: '#F4F7FC'\n}\n\nexport default SharedColors;","const SharedImages = {\n  // Logos\n  logo: require('./images/logo.png'),\n}\n\nexport default SharedImages\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport {\n  Card,\n  Grid,\n  CardContent,\n  Typography\n} from '@material-ui/core';\n import PropTypes from 'prop-types';\nimport { \n  SharedMetrics,\n} from '../../resources';\n\n\nconst useStyles = makeStyles({\n  card: {\n    width: 150,\n    height: 150,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 10\n  },\n  title: {\n    fontSize: 35,\n  },\n  titleComingSoon: {\n    fontSize: 16,\n\n  },\n  subtitle: {\n    fontSize: 10,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst HVStatCard = ({\n  title,\n  subtitle,\n  loading,\n  isComingSoon,\n  children,\n}) => {\n\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      \n        {loading ? \n          <CardContent>\n          <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n              <Skeleton variant=\"circle\" width={40} height={40} />\n              <Skeleton variant=\"text\" height={30} width=\"80%\"/>\n              <Skeleton variant=\"text\" height={10} width=\"50%\"/>\n          </Grid>\n          </CardContent>\n        : \n        <CardContent>\n          {children}\n          <Typography \n            className={isComingSoon ? classes.titleComingSoon : classes.title} \n            color={ isComingSoon ? \"textSecondary\" : \"textPrimary\" }\n          >\n            {title}\n          </Typography>\n          <Typography className={classes.subtitle} color=\"textSecondary\" gutterBottom>\n            {subtitle}\n          </Typography>\n        </CardContent>\n        }       \n    </Card>\n  );\n}\n\nHVStatCard.propTypes = {\n  title: PropTypes.string,\n  isComingSoon: PropTypes.bool,\n  subtitle: PropTypes.string,\n  loading: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n};\n\nHVStatCard.defaultProps = {\n  title: \"Title\",\n  isComingSoon: false,\n  subtitle: \"Subtitle\",\n  loading: false,\n  children: PropTypes.string,\n}\nexport default HVStatCard;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { deepOrange } from '@material-ui/core/colors';\nimport {\n\tGrid,\n\tTypography,\n\tAvatar\n} from '@material-ui/core';\nimport {\n\tSettings\n} from '@material-ui/icons';\nimport PropTypes from 'prop-types';\nimport { \n\tSharedColors\n } from '../../resources'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n\t\tflexGrow: 1,\n\t\theight: 45,\n\t\tbackgroundColor: SharedColors.white\n  },\n\tsettingsIcon: {\n    color: SharedColors.grey,\n    height: 30,\n    width: 30,\n\t\tborderRadius: 35,\n\t\tmarginRight: 10,\t\t\n  },\n\ttitle: {\n\t\tcolor:SharedColors.grey,\n\t  marginLeft: 10\n\t},\n\timage: {\n\t\theight: 35,\n\t\twidth: 35,\n\t\tmarginRight: 10,\n\t\tcolor: '#fff',\n    backgroundColor: deepOrange[500],\n\t}\n}));\n\nconst HVMenu = ({\n\ttitle\n}) => {\n  \n  const [activeItem, setActiveItem] = useState('');\n\tconst classes = useStyles();\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  return (\n\t\t<Grid \n\t\t\tcontainer\n\t\t\titem\n\t\t\tdirection=\"row\"\n\t\t\tjustify=\"space-between\"\n\t\t\talignItems=\"center\"\n\t\t\tclassName={classes.root}\n\t\t>\n\t\t\t<Grid>\n\t\t\t\t<Typography \n\t\t\t\t\tvariant=\"h5\"\n\t\t\t\t\tcomponent=\"h2\"\n\t\t\t\t\tclassName={classes.title}\n\t\t\t\t>\n\t\t\t\t\t{title}\n\t\t\t\t</Typography>\n\t\t\t</Grid>\n\t\t\t<Grid>\n\t\t\t\t<Grid \n\t\t\t\t\tcontainer\n\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\tjustify=\"space-around\"\n\t\t\t\t\talignItems=\"center\"\n\t\t\t\t>\n\t\t\t\t\t<Avatar className={classes.image}>OP</Avatar>\n\t\t\t\t\t<Settings className={classes.settingsIcon}/>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n  )\n}\n\nHVMenu.propTypes = {\n\n}\n\nHVMenu.defaultProps = {\n\n}\n\nexport default HVMenu;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { \n\tBarChart,\n\tXAxis,\n\tYAxis,\n\tCell,\n\tBar\n} from 'recharts';\nimport {\n\tCard,\n\tCardContent,\n\tTypography,\n\tGrid\n} from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SharedColors } from '../../resources'\n\nconst useStyles = makeStyles({\n\tcard: {\n    width: 450,\n    height: 250,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n\t\tborderRadius: 10\n  },\n\ttitle: {\n\t\tfontSize: 16,\n\t\ttextAlign: 'left',\n\t\tcolor: SharedColors.grey,\n\t\tborderBottomColor: SharedColors.grey,\n\t\tborderBottomWidth: 1,\n\t}\n});\n\nconst renderLabel = ({\n\tx, \n\ty, \n\twidth, \n\theight, \n\tvalue\n}) => {\n\n  return (\n\t\t<text \n\t\t\tx={x+ width + 30} \n\t\t\ty={y+height/2+6} \n\t\t\tfill={SharedColors.black} \n\t\t\tfontSize= {18} \n\t\t\ttextAnchor=\"middle\"\n\t\t\tfontFamily=\"Roboto\"\n\t\t>\n\t\t\t{value}\n\t\t</text>\n  );\n}\n\nconst HVBarchart = ({\n\ttitle,\n\tdata,\n\tloading\n}) => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Card className={classes.card}>\n\t\t\t{loading ? \n\t\t\t\t<CardContent>\n\t\t\t\t<Grid\n\t\t\t\t\tcontainer\n\t\t\t\t\tspacing={0}\n\t\t\t\t\tdirection=\"column\"\n\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\tjustify=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t<Skeleton variant=\"text\" height={30} width=\"20%\"/>\n\t\t\t\t<Skeleton variant=\"text\" height={10} width=\"100%\"/>\n\t\t\t\t<Skeleton variant=\"text\" height={10} width=\"100%\"/>\n\t\t\t\t<Skeleton variant=\"text\" height={10} width=\"100%\"/>\n\t\t\t\t<Skeleton variant=\"text\" height={10} width=\"100%\"/>\n\t\t\t\t<Skeleton variant=\"text\" height={10} width=\"100%\"/>\n\t\t\t</Grid>\n\t\t\t\t</CardContent>\n\t\t\t: \n\t\t\t\t<CardContent>\n\t\t\t\t\t<Typography className={classes.title}>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<hr  style={{\n\t\t\t\t\t\tcolor: SharedColors.grey,\n\t\t\t\t\t\tbackgroundColor: SharedColors.grey,\n\t\t\t\t\t\theight: 0.25,\n\t\t\t\t\t\tborderColor : 'transparent'\n\t\t\t\t\t}}/>\n\t\t\t\t\t<BarChart\n\t\t\t\t\t\tlayout=\"vertical\"\n\t\t\t\t\t\twidth={400} \n\t\t\t\t\t\theight={200} \n\t\t\t\t\t\tmargin={{\n\t\t\t\t\t\t\tright: 50,\n\t\t\t\t\t\t\tbottom: 20\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdata={data}\n\t\t\t\t\t>\n\t\t\t\t\t\t<XAxis hide type=\"number\"/>\n\t\t\t\t\t\t<YAxis \n\t\t\t\t\t\t\ttickLine={false} \n\t\t\t\t\t\t\taxisLine={false} \n\t\t\t\t\t\t\ttype=\"category\" \n\t\t\t\t\t\t\tdataKey=\"name\" \n\t\t\t\t\t\t\ttick={{ \n\t\t\t\t\t\t\t\tfontSize: 12, \n\t\t\t\t\t\t\t\tfontFamily: \"Roboto\",\n\t\t\t\t\t\t\t\tfill: SharedColors.grey \n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Bar \n\t\t\t\t\t\t\tlabel={renderLabel}\n\t\t\t\t\t\t\ttype=\"monotone\" \n\t\t\t\t\t\t\tdataKey=\"value\" \n\t\t\t\t\t\t\tfill={SharedColors.blue} \n\t\t\t\t\t\t\tbarGap={0}\n\t\t\t\t\t\t\tbarSize={20}\n\t\t\t\t\t\t\tlegendType='cross'\n\t\t\t\t\t\t\tmaxBarSize={150}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdata ? data.map((entry, index) => {\n\t\t\t\t\t\t\t\tconst color = entry.color;\n\t\t\t\t\t\t\t\treturn <Cell key={entry} fill={color} />;\n\t\t\t\t\t\t\t}) : null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t</Bar>\n\t\t\t\t\t</BarChart>\n\t\t\t\t</CardContent>\n\t\t\t}\n\t\t</Card>\n\t)\n}\n\nHVBarchart.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tdata: PropTypes.arrayOf(PropTypes.shape({\n\t\tname: PropTypes.string,\n\t\tvalue: PropTypes.number,\n\t\tcolor: PropTypes.string,\n\t})),\n\tloading: PropTypes.bool\n}\nexport default HVBarchart;","import axios from 'axios';\n\naxios.defaults.headers.post['Content-Type'] ='application/x-www-form-urlencoded';\nexport default axios.create({\n\tbaseURL: 'https://us-central1-health-score-6740b.cloudfunctions.net/',\n//\tproxy: true,\n\theaders: {\n\t\t'Access-Control-Allow-Origin': '*'\n\t}\n});","import humantiv from './humantiv';\n\nconst getTotalUsers = async () => {\n\tconst response = await humantiv.get('/adminGetNumberUsers')\n\treturn response.data; \n}\n\nconst getTotalMedit  = async () => {\n\tconst response = await humantiv.get('/adminSetTotalMeditStat')\n\treturn response.data; \n}\n\nconst getDeviceStats  = async () => {\n\tconst response = await humantiv.get('/adminGetSourcesStats')\n\treturn response.data; \n}\n\nconst getJourneyStats  = async () => {\n\tconst response = await humantiv.get('/adminGetJourneyStats')\n\treturn response.data; \n}\n\nexport {\n\tgetTotalUsers,\n\tgetTotalMedit,\n\tgetDeviceStats,\n\tgetJourneyStats\n}","import { SharedColors } from '../../resources'\n\nconst _setColor = (journey) => {\n\tswitch (journey) {\n\t\tcase \"energy\":\n\t\t\treturn SharedColors.darkRed;\n\t\tcase \"immunity\":\n\t\t\treturn SharedColors.blue;\n\t\tcase \"performance\":\n\t\t\treturn SharedColors.darkYellow;\n\t\tcase \"longevity\":\n\t\t\treturn SharedColors.darkGreen;\n\t\tdefault:\n\t\t\treturn SharedColors.grey;\n\t}\n}\n\nconst devicesAdapter = data => (\n\tObject.keys(data).map( device => {\n\t\treturn {\n\t\t\tname: device,\n\t\t\tvalue: data[device],\n\t\t\tcolor: SharedColors.blue\n\t\t}\n\t})\n);\n\nconst journeyAdapter = data => (\n\tObject.keys(data).map( journey => {\n\t\treturn {\n\t\t\tname: journey,\n\t\t\tvalue: data[journey],\n\t\t\tcolor: _setColor(journey)\n\t\t}\n\t})\n);\n\nexport {\n\tdevicesAdapter,\n\tjourneyAdapter\n};","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport {\n  Group,\n  Hotel,\n  AccountBalance,\n  DirectionsRun,\n\n} from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SharedColors } from '../../resources';\nimport HVStatCard from '../atoms/HVStatCard';\nimport HVMenuBar from '../molecules/HVMenuBar';\nimport HVBarchart from '../atoms/HVBarChart';\nimport { \n\tuseFetch,\n\tformatCount,\n\tformatMoney\n} from '../../business'\n\nconst useStyles = makeStyles({\n\troot: {\n\t\tflex: 1, \n\t\tbackgroundColor: SharedColors.background, \n\t\ttextAlign: 'center'\n\t},\n\tcontent:{\n\t\tmarginTop:10\n\t},\n  totalUserIcon: {\n    backgroundColor: SharedColors.yellow,\n    color: SharedColors.darkYellow,\n    height: 40,\n    width: 40,\n    borderRadius: 40,\n    padding: 10\n  },\n  averageSleepIcon: {\n    backgroundColor: SharedColors.red,\n    color: SharedColors.darkRed,\n    height: 40,\n    width: 40,\n    borderRadius: 40,\n    padding: 10\n  },\n  totalMeditIcon: {\n    backgroundColor: SharedColors.blue30,\n    color: SharedColors.darkBlue,\n    height: 40,\n    width: 40,\n    borderRadius: 40,\n    padding: 10\n  },\n  totalActivityIcon: {\n    backgroundColor: SharedColors.green,\n    color: SharedColors.darkGreen,\n    height: 40,\n    width: 40,\n    borderRadius: 40,\n    padding: 10\n  },\n  totalStepsIcon: {\n    backgroundColor: SharedColors.purple,\n    color: SharedColors.darkPurple,\n    height: 40,\n    width: 40,\n    borderRadius: 40,\n    padding: 10\n  }\n});\n\nconst HVBoard = () => {\n\tconst classes = useStyles();\n\tconst [data, medit, devices, journeys, loading, reFetch] = useFetch();\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<Grid \n\t\t\t\tcontainer\n\t\t\t\tdirection=\"column\"\n\t\t\t>\n\t\t\t\t<Grid >\n\t\t\t\t\t<HVMenuBar\n\t\t\t\t\t\ttitle=\"Statistics\"\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid className={classes.content}>\n\t\t\t\t\t<Grid \n\t\t\t\t\t\tcontainer\n\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\tjustify=\"space-around\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<HVStatCard \n\t\t\t\t\t\t\ttitle={formatCount(data)}\n\t\t\t\t\t\t\tsubtitle=\"Total Users\"\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Group className={classes.totalUserIcon}/>\n\t\t\t\t\t\t</HVStatCard>\n\t\t\t\t\t\t<HVStatCard \n\t\t\t\t\t\t\ttitle={formatMoney(medit)}\n\t\t\t\t\t\t\tsubtitle=\"Total Medit\"\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<AccountBalance className={classes.totalMeditIcon}/>\n\t\t\t\t\t\t</HVStatCard>\n\t\t\t\t\t\t<HVStatCard \n\t\t\t\t\t\t\ttitle=\"Coming Soon\"\n\t\t\t\t\t\t\tsubtitle=\"Average Sleep Hours\"\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\tisComingSoon\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Hotel className={classes.averageSleepIcon}/>\n\t\t\t\t\t\t</HVStatCard>\n\t\t\t\t\t\t<HVStatCard \n\t\t\t\t\t\t\ttitle=\"Coming Soon\"\n\t\t\t\t\t\t\tsubtitle=\"Total Steps\"\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\tisComingSoon\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<AccountBalance className={classes.totalActivityIcon}/>\n\t\t\t\t\t\t</HVStatCard>\n\t\t\t\t\t\t<HVStatCard \n\t\t\t\t\t\t\ttitle=\"Coming Soon\"\n\t\t\t\t\t\t\tsubtitle=\"Total Activity Minutes\"\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\tisComingSoon\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DirectionsRun className={classes.totalStepsIcon}/>\n\t\t\t\t\t\t</HVStatCard>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid\n\t\t\t\t\t\tcontainer\n\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\tjustify=\"space-around\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginTop: 20,\n\t\t\t\t\t\t\tmarginBottom: 20\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<HVBarchart \n\t\t\t\t\t\t\ttitle=\"Fitness Trackers\"\n\t\t\t\t\t\t\tdata={devices}\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<HVBarchart \n\t\t\t\t\t\t\ttitle=\"Journey\"\n\t\t\t\t\t\t\tdata={journeys}\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n      </Grid>\n    </div>\n\t)\n}\n\nexport default HVBoard;","import numeral from 'numeral';\n\nconst formatMoney = (amount) => {\n\treturn numeral(amount).format('(0.0 a)');\n}\n\nconst formatCount = (count) => {\n\treturn numeral(count).format('0 a');\n}\n\nexport {\n\tformatMoney,\n\tformatCount\n}","import { useState, useEffect } from 'react';\nimport { \n\tgetTotalUsers, \n\tgetTotalMedit,\n\tgetDeviceStats,\n\tgetJourneyStats\n} from '../network/api';\nimport {\n\tdevicesAdapter,\n\tjourneyAdapter\n} from '../utils/adapters'\n\nconst useFetch = () => {\n\tconst [users, setUsers] = useState(null);\n\tconst [medit, setMedit] = useState(null);\n\tconst [devices, setDevices] = useState(null);\n\tconst [journeys, setJourneys] = useState(null);\n\tconst [loading, setLoading] = useState(true);\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\tconst reFetch = () => {\n\t\tfetchData();\n\t};\n\n\tconst fetchData = async () => {\n\t\tsetLoading(true);\n\t\tconst dUsers = await getTotalUsers();\n\t\tconst dMedit = await getTotalMedit();\n\t\tconst dDevices = await getDeviceStats();\n\t\tconst dJourneys = await getJourneyStats();\n\t\tsetUsers(dUsers);\n\t\tsetMedit(dMedit);\n\t\tsetDevices(devicesAdapter(dDevices));\n\t\tsetJourneys(journeyAdapter(dJourneys));\n\t\tsetLoading(false);\n\t};\n\n\treturn [users, medit, devices, journeys, loading, reFetch];\n};\n\n\n\nexport {\n\tuseFetch\n}","import React from 'react';\nimport { HVBoard } from '../components/templates';\nimport { SharedColors } from '../resources';\n\nconst Dashboard = () => {\n\n  return (\n    <div style={styles.container}>\n      <HVBoard \n      />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    flex: 1,\n    backgroundColor: SharedColors.background\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './screens/Dashboard'\n\nfunction App() {\n\n  return (\n    <Dashboard/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}